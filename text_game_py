import tkinter as tk
import random

class RestaurantRushTextGame:
    def __init__(self, root):
        self.root = root
        self.root.title("Text-Based Restaurant Rush")
        self.root.geometry("600x400")

        # Game variables
        self.dishes = {
            "Burger": ["Bun", "Patty", "Lettuce"],
            "Pizza": ["Dough", "Tomato Sauce", "Cheese"],
            "Pasta": ["Pasta", "Tomato Sauce", "Cheese"],
            "Salad": ["Lettuce", "Tomato", "Cucumber"],
            "Soup": ["Water", "Vegetables", "Salt"]
        }
        self.orders = []
        self.current_order = None
        self.score = 0
        self.time_left = 60  # Initial game duration in seconds
        self.timer_active = False
        self.stock = {ingredient: 5 for ingredients in self.dishes.values() for ingredient in ingredients}
        
        # UI Setup
        self.setup_ui()

    def setup_ui(self):
        # Text display for game messages
        self.text_display = tk.Text(self.root, height=15, width=70, state="disabled")
        self.text_display.pack(pady=10)

        # Text input for player commands
        self.command_entry = tk.Entry(self.root, width=50)
        self.command_entry.pack(pady=10)
        self.command_entry.bind("<Return>", self.process_command)

        # Timer and Score display
        self.info_frame = tk.Frame(self.root)
        self.info_frame.pack(pady=10)

        self.timer_label = tk.Label(self.info_frame, text=f"Time Left: {self.time_left}s")
        self.timer_label.pack(side="left", padx=20)

        self.score_label = tk.Label(self.info_frame, text=f"Score: {self.score}")
        self.score_label.pack(side="left", padx=20)

        # Start button
        self.start_button = tk.Button(self.root, text="Start Game", command=self.start_game)
        self.start_button.pack(pady=10)

    def start_game(self):
        self.reset_game()
        self.timer_active = True
        self.generate_orders()
        self.update_timer()

    def reset_game(self):
        self.orders.clear()
        self.current_order = None
        self.score = 0
        self.time_left = 60
        self.update_ui()
        self.display_message("Game started! Use commands to play:\n- 'accept' to accept an order\n- 'serve [dish]' to serve a dish\n- 'restock' to restock ingredients.")

    def generate_orders(self):
        if self.timer_active:
            if len(self.orders) < 5:  # Limit to 5 pending orders
                new_order = random.choice(list(self.dishes.keys()))
                self.orders.append(new_order)
                self.display_message(f"New Order: {new_order}")
            self.root.after(7000, self.generate_orders)

    def process_command(self, event):
        command = self.command_entry.get().strip()
        self.command_entry.delete(0, tk.END)

        if command == "accept":
            self.accept_order()
        elif command.startswith("serve"):
            _, *dish_parts = command.split()
            dish_name = " ".join(dish_parts)
            self.serve_order(dish_name)
        elif command == "restock":
            self.restock()
        else:
            self.display_message("Invalid command. Use 'accept', 'serve [dish]', or 'restock'.")

    def accept_order(self):
        if self.orders:
            self.current_order = self.orders.pop(0)
            self.display_message(f"Accepted Order: {self.current_order}")
        else:
            self.display_message("No orders to accept!")

    def serve_order(self, dish_name):
        if self.current_order and self.current_order == dish_name:
            required_ingredients = self.dishes[dish_name]
            if all(self.stock[ingredient] > 0 for ingredient in required_ingredients):
                for ingredient in required_ingredients:
                    self.stock[ingredient] -= 1
                self.score += 10
                self.current_order = None
                self.display_message(f"Successfully served {dish_name}!")
            else:
                self.display_message("Not enough ingredients to serve this order!")
        elif self.current_order:
            self.display_message(f"Current order is {self.current_order}. Serve that first!")
        else:
            self.display_message("No current order to serve!")
        self.update_ui()

    def restock(self):
        for ingredient in self.stock.keys():
            self.stock[ingredient] += 5
        self.display_message("Ingredients restocked!")

    def update_timer(self):
        if self.time_left > 0 and self.timer_active:
            self.time_left -= 1
            self.timer_label.config(text=f"Time Left: {self.time_left}s")
            self.root.after(1000, self.update_timer)
        elif self.time_left == 0:
            self.timer_active = False
            self.end_game()

    def end_game(self):
        self.display_message(f"Time's up! Game over! Final Score: {self.score}")
        self.timer_active = False
        self.start_button.config(state="normal")

    def update_ui(self):
        self.score_label.config(text=f"Score: {self.score}")
        self.timer_label.config(text=f"Time Left: {self.time_left}s")

    def display_message(self, message):
        self.text_display.config(state="normal")
        self.text_display.insert("end", message + "\n")
        self.text_display.config(state="disabled")
        self.text_display.see("end")

# Main application
if __name__ == "__main__":
    root = tk.Tk()
    game = RestaurantRushTextGame(root)
    root.mainloop()
